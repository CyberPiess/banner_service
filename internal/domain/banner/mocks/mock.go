// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_banner_service is a generated GoMock package.
package mock_banner_service

import (
	reflect "reflect"

	banner_storage "github.com/CyberPiess/banner_service/internal/infrastructure/postgres/banner"
	redis_cache "github.com/CyberPiess/banner_service/internal/infrastructure/redis/cache"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockbannerStorage is a mock of bannerStorage interface.
type MockbannerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockbannerStorageMockRecorder
}

// MockbannerStorageMockRecorder is the mock recorder for MockbannerStorage.
type MockbannerStorageMockRecorder struct {
	mock *MockbannerStorage
}

// NewMockbannerStorage creates a new mock instance.
func NewMockbannerStorage(ctrl *gomock.Controller) *MockbannerStorage {
	mock := &MockbannerStorage{ctrl: ctrl}
	mock.recorder = &MockbannerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbannerStorage) EXPECT() *MockbannerStorageMockRecorder {
	return m.recorder
}

// DeleteBanner mocks base method.
func (m *MockbannerStorage) DeleteBanner(deleteBannerParams banner_storage.BannerPutPostCriteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", deleteBannerParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockbannerStorageMockRecorder) DeleteBanner(deleteBannerParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockbannerStorage)(nil).DeleteBanner), deleteBannerParams)
}

// Get mocks base method.
func (m *MockbannerStorage) Get(bannerParams banner_storage.GetUserBannerCriteria) ([]banner_storage.BannerEntitySql, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", bannerParams)
	ret0, _ := ret[0].([]banner_storage.BannerEntitySql)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockbannerStorageMockRecorder) Get(bannerParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockbannerStorage)(nil).Get), bannerParams)
}

// GetAllBanners mocks base method.
func (m *MockbannerStorage) GetAllBanners(bannerParams banner_storage.GetBannersListCriteria) ([]banner_storage.BannerEntitySql, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBanners", bannerParams)
	ret0, _ := ret[0].([]banner_storage.BannerEntitySql)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBanners indicates an expected call of GetAllBanners.
func (mr *MockbannerStorageMockRecorder) GetAllBanners(bannerParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBanners", reflect.TypeOf((*MockbannerStorage)(nil).GetAllBanners), bannerParams)
}

// IfAdminTokenValid mocks base method.
func (m *MockbannerStorage) IfAdminTokenValid(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfAdminTokenValid", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfAdminTokenValid indicates an expected call of IfAdminTokenValid.
func (mr *MockbannerStorageMockRecorder) IfAdminTokenValid(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfAdminTokenValid", reflect.TypeOf((*MockbannerStorage)(nil).IfAdminTokenValid), token)
}

// IfBannerExists mocks base method.
func (m *MockbannerStorage) IfBannerExists(featureId, tagId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfBannerExists", featureId, tagId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfBannerExists indicates an expected call of IfBannerExists.
func (mr *MockbannerStorageMockRecorder) IfBannerExists(featureId, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfBannerExists", reflect.TypeOf((*MockbannerStorage)(nil).IfBannerExists), featureId, tagId)
}

// IfTokenValid mocks base method.
func (m *MockbannerStorage) IfTokenValid(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfTokenValid", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfTokenValid indicates an expected call of IfTokenValid.
func (mr *MockbannerStorageMockRecorder) IfTokenValid(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfTokenValid", reflect.TypeOf((*MockbannerStorage)(nil).IfTokenValid), token)
}

// PostBanner mocks base method.
func (m *MockbannerStorage) PostBanner(postBannerParams banner_storage.BannerPutPostCriteria) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBanner", postBannerParams)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBanner indicates an expected call of PostBanner.
func (mr *MockbannerStorageMockRecorder) PostBanner(postBannerParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBanner", reflect.TypeOf((*MockbannerStorage)(nil).PostBanner), postBannerParams)
}

// PutBanner mocks base method.
func (m *MockbannerStorage) PutBanner(putBannerParams banner_storage.BannerPutPostCriteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBanner", putBannerParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBanner indicates an expected call of PutBanner.
func (mr *MockbannerStorageMockRecorder) PutBanner(putBannerParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBanner", reflect.TypeOf((*MockbannerStorage)(nil).PutBanner), putBannerParams)
}

// SearchBannerByID mocks base method.
func (m *MockbannerStorage) SearchBannerByID(bannerID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBannerByID", bannerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBannerByID indicates an expected call of SearchBannerByID.
func (mr *MockbannerStorageMockRecorder) SearchBannerByID(bannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBannerByID", reflect.TypeOf((*MockbannerStorage)(nil).SearchBannerByID), bannerID)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// WithFields mocks base method.
func (m *Mocklogger) WithFields(fields logrus.Fields) *logrus.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockloggerMockRecorder) WithFields(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*Mocklogger)(nil).WithFields), fields)
}

// MockredisCache is a mock of redisCache interface.
type MockredisCache struct {
	ctrl     *gomock.Controller
	recorder *MockredisCacheMockRecorder
}

// MockredisCacheMockRecorder is the mock recorder for MockredisCache.
type MockredisCacheMockRecorder struct {
	mock *MockredisCache
}

// NewMockredisCache creates a new mock instance.
func NewMockredisCache(ctrl *gomock.Controller) *MockredisCache {
	mock := &MockredisCache{ctrl: ctrl}
	mock.recorder = &MockredisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisCache) EXPECT() *MockredisCacheMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockredisCache) AddToCache(key string, redisDTO redis_cache.RedisEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCache", key, redisDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockredisCacheMockRecorder) AddToCache(key, redisDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockredisCache)(nil).AddToCache), key, redisDTO)
}

// GetFromCache mocks base method.
func (m *MockredisCache) GetFromCache(key string) (redis_cache.RedisEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromCache", key)
	ret0, _ := ret[0].(redis_cache.RedisEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromCache indicates an expected call of GetFromCache.
func (mr *MockredisCacheMockRecorder) GetFromCache(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromCache", reflect.TypeOf((*MockredisCache)(nil).GetFromCache), key)
}

// IfCacheExists mocks base method.
func (m *MockredisCache) IfCacheExists(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfCacheExists", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfCacheExists indicates an expected call of IfCacheExists.
func (mr *MockredisCacheMockRecorder) IfCacheExists(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfCacheExists", reflect.TypeOf((*MockredisCache)(nil).IfCacheExists), key)
}
