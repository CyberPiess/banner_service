// Code generated by MockGen. DO NOT EDIT.
// Source: put_banner.go

// Package mock_putbanner is a generated GoMock package.
package mock_putbanner

import (
	reflect "reflect"

	banner "github.com/CyberPiess/banner_sevice/internal/domain/banner"
	gomock "github.com/golang/mock/gomock"
)

// MockputBannerService is a mock of putBannerService interface.
type MockputBannerService struct {
	ctrl     *gomock.Controller
	recorder *MockputBannerServiceMockRecorder
}

// MockputBannerServiceMockRecorder is the mock recorder for MockputBannerService.
type MockputBannerServiceMockRecorder struct {
	mock *MockputBannerService
}

// NewMockputBannerService creates a new mock instance.
func NewMockputBannerService(ctrl *gomock.Controller) *MockputBannerService {
	mock := &MockputBannerService{ctrl: ctrl}
	mock.recorder = &MockputBannerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockputBannerService) EXPECT() *MockputBannerServiceMockRecorder {
	return m.recorder
}

// PostBanner mocks base method.
func (m *MockputBannerService) PostBanner(newPostBanner banner.BannerEntity, user banner.User) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBanner", newPostBanner, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostBanner indicates an expected call of PostBanner.
func (mr *MockputBannerServiceMockRecorder) PostBanner(newPostBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBanner", reflect.TypeOf((*MockputBannerService)(nil).PostBanner), newPostBanner, user)
}

// PutBanner mocks base method.
func (m *MockputBannerService) PutBanner(newPutBanner banner.BannerEntity, user banner.User) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBanner", newPutBanner, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PutBanner indicates an expected call of PutBanner.
func (mr *MockputBannerServiceMockRecorder) PutBanner(newPutBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBanner", reflect.TypeOf((*MockputBannerService)(nil).PutBanner), newPutBanner, user)
}

// SearchAllBanners mocks base method.
func (m *MockputBannerService) SearchAllBanners(bannerFilter banner.Filter, user banner.User) ([]banner.BannerEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllBanners", bannerFilter, user)
	ret0, _ := ret[0].([]banner.BannerEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchAllBanners indicates an expected call of SearchAllBanners.
func (mr *MockputBannerServiceMockRecorder) SearchAllBanners(bannerFilter, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllBanners", reflect.TypeOf((*MockputBannerService)(nil).SearchAllBanners), bannerFilter, user)
}

// SearchBanner mocks base method.
func (m *MockputBannerService) SearchBanner(bannerFilter banner.Filter, user banner.User) (banner.BannerEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBanner", bannerFilter, user)
	ret0, _ := ret[0].(banner.BannerEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchBanner indicates an expected call of SearchBanner.
func (mr *MockputBannerServiceMockRecorder) SearchBanner(bannerFilter, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBanner", reflect.TypeOf((*MockputBannerService)(nil).SearchBanner), bannerFilter, user)
}
