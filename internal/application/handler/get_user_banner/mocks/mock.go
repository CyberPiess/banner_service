// Code generated by MockGen. DO NOT EDIT.
// Source: user_banner.go

// Package mock_userbanner is a generated GoMock package.
package mock_userbanner

import (
	reflect "reflect"

	banner "github.com/CyberPiess/banner_sevice/internal/domain/banner"
	gomock "github.com/golang/mock/gomock"
)

// MockbannerService is a mock of bannerService interface.
type MockbannerService struct {
	ctrl     *gomock.Controller
	recorder *MockbannerServiceMockRecorder
}

// MockbannerServiceMockRecorder is the mock recorder for MockbannerService.
type MockbannerServiceMockRecorder struct {
	mock *MockbannerService
}

// NewMockbannerService creates a new mock instance.
func NewMockbannerService(ctrl *gomock.Controller) *MockbannerService {
	mock := &MockbannerService{ctrl: ctrl}
	mock.recorder = &MockbannerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbannerService) EXPECT() *MockbannerServiceMockRecorder {
	return m.recorder
}

// DeleteBanner mocks base method.
func (m *MockbannerService) DeleteBanner(newPutBanner banner.BannerEntity, user banner.User) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", newPutBanner, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockbannerServiceMockRecorder) DeleteBanner(newPutBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockbannerService)(nil).DeleteBanner), newPutBanner, user)
}

// PostBanner mocks base method.
func (m *MockbannerService) PostBanner(newPostBanner banner.BannerEntity, user banner.User) (int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBanner", newPostBanner, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostBanner indicates an expected call of PostBanner.
func (mr *MockbannerServiceMockRecorder) PostBanner(newPostBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBanner", reflect.TypeOf((*MockbannerService)(nil).PostBanner), newPostBanner, user)
}

// PutBanner mocks base method.
func (m *MockbannerService) PutBanner(newPutBanner banner.BannerEntity, user banner.User) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBanner", newPutBanner, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PutBanner indicates an expected call of PutBanner.
func (mr *MockbannerServiceMockRecorder) PutBanner(newPutBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBanner", reflect.TypeOf((*MockbannerService)(nil).PutBanner), newPutBanner, user)
}

// SearchAllBanners mocks base method.
func (m *MockbannerService) SearchAllBanners(bannerFilter banner.GetAllFilter, user banner.User) ([]banner.BannerEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllBanners", bannerFilter, user)
	ret0, _ := ret[0].([]banner.BannerEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchAllBanners indicates an expected call of SearchAllBanners.
func (mr *MockbannerServiceMockRecorder) SearchAllBanners(bannerFilter, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllBanners", reflect.TypeOf((*MockbannerService)(nil).SearchAllBanners), bannerFilter, user)
}

// SearchBanner mocks base method.
func (m *MockbannerService) SearchBanner(bannerFilter banner.GetFilter, user banner.User) (banner.BannerEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBanner", bannerFilter, user)
	ret0, _ := ret[0].(banner.BannerEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchBanner indicates an expected call of SearchBanner.
func (mr *MockbannerServiceMockRecorder) SearchBanner(bannerFilter, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBanner", reflect.TypeOf((*MockbannerService)(nil).SearchBanner), bannerFilter, user)
}
