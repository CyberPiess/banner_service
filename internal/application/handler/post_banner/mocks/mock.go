// Code generated by MockGen. DO NOT EDIT.
// Source: post_banner.go

// Package mock_postbanner is a generated GoMock package.
package mock_postbanner

import (
	reflect "reflect"

	banner "github.com/CyberPiess/banner_sevice/internal/domain/banner"
	gomock "github.com/golang/mock/gomock"
)

// MockpostBannerService is a mock of postBannerService interface.
type MockpostBannerService struct {
	ctrl     *gomock.Controller
	recorder *MockpostBannerServiceMockRecorder
}

// MockpostBannerServiceMockRecorder is the mock recorder for MockpostBannerService.
type MockpostBannerServiceMockRecorder struct {
	mock *MockpostBannerService
}

// NewMockpostBannerService creates a new mock instance.
func NewMockpostBannerService(ctrl *gomock.Controller) *MockpostBannerService {
	mock := &MockpostBannerService{ctrl: ctrl}
	mock.recorder = &MockpostBannerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostBannerService) EXPECT() *MockpostBannerServiceMockRecorder {
	return m.recorder
}

// DeleteBanner mocks base method.
func (m *MockpostBannerService) DeleteBanner(newPutBanner banner.BannerEntity, user banner.User) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", newPutBanner, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockpostBannerServiceMockRecorder) DeleteBanner(newPutBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockpostBannerService)(nil).DeleteBanner), newPutBanner, user)
}

// PostBanner mocks base method.
func (m *MockpostBannerService) PostBanner(newPostBanner banner.BannerEntity, user banner.User) (int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBanner", newPostBanner, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostBanner indicates an expected call of PostBanner.
func (mr *MockpostBannerServiceMockRecorder) PostBanner(newPostBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBanner", reflect.TypeOf((*MockpostBannerService)(nil).PostBanner), newPostBanner, user)
}

// PutBanner mocks base method.
func (m *MockpostBannerService) PutBanner(newPutBanner banner.BannerEntity, user banner.User) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBanner", newPutBanner, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PutBanner indicates an expected call of PutBanner.
func (mr *MockpostBannerServiceMockRecorder) PutBanner(newPutBanner, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBanner", reflect.TypeOf((*MockpostBannerService)(nil).PutBanner), newPutBanner, user)
}

// SearchAllBanners mocks base method.
func (m *MockpostBannerService) SearchAllBanners(bannerFilter banner.GetAllFilter, user banner.User) ([]banner.BannerEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllBanners", bannerFilter, user)
	ret0, _ := ret[0].([]banner.BannerEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchAllBanners indicates an expected call of SearchAllBanners.
func (mr *MockpostBannerServiceMockRecorder) SearchAllBanners(bannerFilter, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllBanners", reflect.TypeOf((*MockpostBannerService)(nil).SearchAllBanners), bannerFilter, user)
}

// SearchBanner mocks base method.
func (m *MockpostBannerService) SearchBanner(bannerFilter banner.GetFilter, user banner.User) (banner.BannerEntity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBanner", bannerFilter, user)
	ret0, _ := ret[0].(banner.BannerEntity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchBanner indicates an expected call of SearchBanner.
func (mr *MockpostBannerServiceMockRecorder) SearchBanner(bannerFilter, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBanner", reflect.TypeOf((*MockpostBannerService)(nil).SearchBanner), bannerFilter, user)
}
